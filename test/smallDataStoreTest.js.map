{"version":3,"sources":["../smallDataStoreTest.js"],"names":[],"mappings":";;AAAA;;;;;;AAEA,QAAQ,GAAR;AACA,IAAI,SAAS,QAAQ,QAAR,CAAT;;AAEJ,IAAI,YAAY,+BAAZ;;AAEJ,SAAS,kBAAT,EAA6B,YAAW;;AAEtC,KAAG,6BAAH,EAAkC,YAAW;AAC3C,WAAO,KAAP,CAAa,UAAU,cAAV,CAAyB,YAAzB,CAAb,EAAqD,IAArD,EAD2C;AAE3C,WAAO,KAAP,CAAa,UAAU,cAAV,CAAyB,KAAzB,CAAb,EAA8C,IAA9C,EAF2C;GAAX,CAAlC,CAFsC;;AAOtC,KAAG,oDAAH,EAAyD,YAAW;AAClE,QAAI,WAAW,8BAAe,EAAf,CAAX,CAD8D;AAElE,uBAAmB,QAAnB,EAFkE;GAAX,CAAzD,CAPsC;;AAYtC,KAAG,2DAAH,EAAgE,YAAW;AACzE,QAAI,WAAW,UAAU,GAAV,CAAc,EAAd,CAAX,CADqE;AAEzE,QAAI,YAAY,UAAU,GAAV,CAAc,EAAd,CAAZ,CAFqE;AAGzE,WAAO,KAAP,CAAa,UAAU,UAAV,GAAuB,MAAvB,EAA+B,CAA5C,EAHyE;GAAX,CAAhE,CAZsC;CAAX,CAA7B;;AAoBA,SAAS,sBAAT,EAAiC,YAAW;;AAE1C,KAAG,mDAAH,EAAwD,YAAW;AACjE,QAAI,WAAW,UAAU,GAAV,EAAX,CAD6D;AAEjE,uBAAmB,QAAnB,EAFiE;GAAX,CAAxD,CAF0C;;AAO1C,KAAG,kEAAH,EAAuE,YAAW;AAChF,QAAI,WAAW,UAAU,GAAV,EAAX,CAD4E;AAEhF,WAAO,KAAP,CAAa,SAAS,GAAT,CAAa,WAAb,EAA0B,IAA1B,CAAb,EAA8C,IAA9C,EAFgF;GAAX,CAAvE,CAP0C;;AAY1C,KAAG,uCAAH,EAA4C,YAAW;AACrD,QAAI,WAAW,UAAU,GAAV,CAAc;AAC3B,eAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAT;KADa,CAAX,CADiD;AAIrD,WAAO,SAAP,CAAiB,SAAS,MAAT,CAAgB,OAAhB,EAAyB,UAAS,KAAT,EAAgB;AACxD,YAAM,IAAN,CAAW,CAAX,EADwD;KAAhB,CAA1C,EAEI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAFJ,EAJqD;GAAX,CAA5C,CAZ0C;;AAqB1C,KAAG,gDAAH,EAAqD,YAAW;AAC9D,QAAI,WAAW,UAAU,GAAV,CAAc;AAC3B,eAAS,CAAT;AACA,eAAS,CAAT;KAFa,CAAX,CAD0D;AAK9D,WAAO,SAAP,CAAiB,CAAC,OAAD,EAAU,OAAV,CAAjB,EAAqC,SAAS,IAAT,EAArC,EAL8D;GAAX,CAArD,CArB0C;CAAX,CAAjC;;AA+BA,SAAS,kBAAT,CAA4B,KAA5B,EAAmC;AACjC,SAAO,KAAP,CAAa,MAAM,cAAN,CAAqB,KAArB,CAAb,EAA0C,IAA1C,EADiC;AAEjC,SAAO,KAAP,CAAa,MAAM,cAAN,CAAqB,KAArB,CAAb,EAA0C,IAA1C,EAFiC;AAGjC,SAAO,KAAP,CAAa,MAAM,cAAN,CAAqB,QAArB,CAAb,EAA6C,IAA7C,EAHiC;AAIjC,SAAO,KAAP,CAAa,MAAM,cAAN,CAAqB,MAArB,CAAb,EAA2C,IAA3C,EAJiC;CAAnC","file":"smallDataStoreTest.js","sourcesContent":["import smallDataStore from '../build/smallDataStore.js'\n\nconsole.log(smallDataStore);\nvar assert = require('assert');\n\nvar dataStore = smallDataStore();\n\ndescribe('smallDataStore()', function() {\n\n  it('should return two functions', function() {\n    assert.equal(dataStore.hasOwnProperty('storeGroup'), true);\n    assert.equal(dataStore.hasOwnProperty('new'), true);\n  });\n\n  it('should create a new store if called with an object', function() {\n    var newStore = smallDataStore({});\n    hasStoreProperties(newStore);\n  });\n\n  it('should have an array of grouped stores with .storeGroup()', function() {\n    var newStore = dataStore.new({});\n    var newStore2 = dataStore.new({});\n    assert.equal(dataStore.storeGroup().length, 2);\n  });\n\n});\n\ndescribe('smallDataStore.new()', function() {\n\n  it('should have a get, set, keys, and update function', function() {\n    var newStore = dataStore.new();\n    hasStoreProperties(newStore);\n  });\n\n  it('should set a value when using .set() and get a value with .get()', function() {\n    var newStore = dataStore.new();\n    assert.equal(newStore.set('testValue', true), true);\n  });\n\n  it('should update a value using .update()', function() {\n    var newStore = dataStore.new({\n      'value': [1, 2, 3, 4]\n    });\n    assert.deepEqual(newStore.update('value', function(value) {\n      value.push(5);\n    }), [1, 2, 3, 4, 5]);\n  });\n\n  it('should retrieve all keys of store with .keys()', function() {\n    var newStore = dataStore.new({\n      'test1': 1,\n      'test2': 2\n    })\n    assert.deepEqual(['test1', 'test2'], newStore.keys());\n  });\n\n});\n\nfunction hasStoreProperties(store) {\n  assert.equal(store.hasOwnProperty('get'), true);\n  assert.equal(store.hasOwnProperty('set'), true);\n  assert.equal(store.hasOwnProperty('update'), true);\n  assert.equal(store.hasOwnProperty('keys'), true);\n}\n"]}